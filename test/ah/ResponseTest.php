<?php
namespace ah;

require_once dirname(__FILE__) . '/../init.php';

/**
 * Test class for Response.
 * Generated by PHPUnit on 2011-05-05 at 22:17:17.
 */
class ResponseTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Response
     */
    protected $object;
    protected $testCode;
    protected $testBody;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Response();
        $this->testCode = 200;
        $this->testBody = 'PHP UNIT TEST RESPONSE';
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testSetStatusCode()
    {
        $this->object->setStatusCode($this->testCode);
        $this->assertAttributeSame($this->testCode, '_status', $this->object);
        return $this->object;
    }

    /**
     * @depends testSetStatusCode
     */
    public function testGetStatusCode($obj)
    {
        $this->assertSame($this->testCode, $obj->getStatusCode());
    }

    public function testSetBody()
    {
        $this->object->setBody($this->testBody);
        $this->assertAttributeSame($this->testBody, '_body', $this->object);
        return $this->object;
    }

    /**
     * @depends testSetBody
     */
    public function testGetBody($obj)
    {
        $this->assertSame($this->testBody, $obj->getBody());
    }

    public function testSetCharset()
    {
        $charset = 'Shift-JIS';
        $this->object->setCharset($charset);
        $this->assertAttributeSame($charset, '_charset', $this->object);
    }

    public function testSetMimeType()
    {
        $mime = 'application/javascript';
        $this->object->setMimeType($mime);
        $this->assertAttributeSame($mime, '_mimetype', $this->object);
    }

    public function testSetLocation()
    {
        $location = 'http://example.com';
        $this->object->setLocation($location);
        $this->assertAttributeSame($location, '_location', $this->object);
    }

    public function testSetNoCache()
    {
        $nocache = true;
        $this->object->setNoCache($nocache);
        $this->assertAttributeSame($nocache, '_nocache', $this->object);
    }

    public function testSetCacheControl()
    {
        $cache = 'no';
        $this->object->setCacheControl($cache);
        $this->assertAttributeSame($cache, '_cache', $this->object);
    }

    /**
     * @todo Implement testSetHeader().
     */
    public function testSetHeader()
    {
//        $headers = array(
//            'PHP_UNIT_HEADER_TEST1' => 'VALUE1',
//            'PHP_UNIT_HEADER_TEST2' => 'VALUE2',
//            'PHP_UNIT_HEADER_TEST3' => 'VALUE3',
//            'PHP_UNIT_HEADER_TEST4' => 'VALUE4',
//            'PHP_UNIT_HEADER_TEST5' => 'VALUE5',
//        );
//
//        foreach ( $headers as $key => $val ) {
//            $this->object->setHeader($key, $val);
//        }
//
//        return array('object' => $this->object, 'headers' => $headers);

        $this->markTestSkipped(
          'リクエストヘッダの送出の検査方法が不明なので保留.'
        );
    }

    public function testSend()
    {
        $this->object->setStatusCode($this->testCode);
        $this->object->setBody($this->testBody);

        ob_start();
        $this->object->send();
        $resBody = \ob_get_clean();

        $this->assertEquals($this->testBody,$resBody);
    }
}
?>
